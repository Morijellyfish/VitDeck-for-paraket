using System.Linq;
using System.Reflection;
using UnityEditor;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace VitDeck.Validator
{
    public class D08_LightmapSizeLimitRule : BaseRule
    {
        private readonly int lightmapCountLimit;
        private readonly int lightmapResolutionLimit;

        public D08_LightmapSizeLimitRule(string name, int lightmapCountLimit, int lightmapResolutionLimit) : base(name)
        {
            this.lightmapCountLimit = lightmapCountLimit;
            this.lightmapResolutionLimit = lightmapResolutionLimit;
        }

        protected override void Logic(ValidationTarget target)
        {
            var scenes = target.GetScenes();

            // 全てリアルタイムであればlightmapの検証は不要
            var staticRenderersCount = target.GetAllObjects()
                .Where(IsWrittenToLightmap)
                .SelectMany(obj => obj.GetComponents<Renderer>())
                .Count();

            if (staticRenderersCount == 0)
            {
                return;
            }

            foreach (var scene in scenes)
            {
                LogicForScene(scene);
            }

            if (IsLightMapAutoGenerated())
            {
                AddIssue(new Issue(
                    null,
                    IssueLevel.Error,
                    "LightMapのベイク方法をAuto Generateにしている場合、正常な検証が行えません。",
                    "以下の操作を行ってください。\n" +
                    "1. Unityメニュー→Window→Lighting→SettingでLightingウィンドウを開く。\n" +
                    "2. ウィンドウの下部にある、Auto Generateトグルをオフにする\n" +
                    "3. Generate Lightingボタンをクリックする。\n" +
                    "4. ライトのベイクが行われるので、終了を待つ。進捗はエディタウィンドウ右下で確認する。\n" +
                    "5. 終了を確認してから再度検証を行う。" +
                    "オブジェクトの追加や配置を変えた後に再度検証する場合は、3以降の手順を繰り返してください。"
                    ));
            }
        }

        private bool IsWrittenToLightmap(GameObject obj)
        {
            if (!obj.activeInHierarchy)
            {
                return false;
            }

            var objStaticFlags = GameObjectUtility.GetStaticEditorFlags(obj);
            if ((objStaticFlags & StaticEditorFlags.LightmapStatic) != StaticEditorFlags.LightmapStatic)
            {
                return false;
            }

            return true;
        }

        void LogicForScene(Scene scene)
        {
            var lightmaps = LightmapSettings.lightmaps;
            if (lightmaps.Length > lightmapCountLimit)
            {
                AddIssue(new Issue(
                    null,
                    IssueLevel.Error,
                    string.Format("LightMapの生成枚数が上限({0})を超えています。（{1}枚）", lightmapCountLimit, lightmaps.Length),
                    "制限内に収まるよう、オブジェクトの数を減らしたり、MeshRendererのScale In Lightmapの設定を下げてください。"
                    ));
            }

            foreach (var lightmap in lightmaps)
            {
                var texture = lightmap.lightmapDir;
                if (texture.width > lightmapResolutionLimit || texture.height > lightmapResolutionLimit)
                {
                    AddIssue(new Issue(
                        null,
                        IssueLevel.Error,
                        string.Format("LightMapの解像度が上限({0}px)を超えています。({1}px*{2}px)", lightmapResolutionLimit, texture.width, texture.height),
                        "以下の操作を行い、最大解像度を下げてください。\n" +
                        "1. Unityメニュー→Window→Lighting→SettingでLightingウィンドウを開く。\n" +
                        "2. ウィンドウの上部にある、[Scene][Global Maps][Object Maps]の中の[Scene]を選択する。\n" +
                        "3. 下にスクロールし、▼Lightmapping Settings を開く。\n" +
                        "4. Lightmap Sizeの項目を512に設定する。"));
                }
            }
        }

        static bool IsLightMapAutoGenerated()
        {
            var lightmapSettings = GetLighmapSettings();
            return lightmapSettings.FindProperty("m_GIWorkflowMode").intValue == 0;
        }

        static SerializedObject GetLighmapSettings()
        {
            var getLightmapSettingsMethod = typeof(LightmapEditorSettings)
                .GetMethod("GetLightmapSettings", BindingFlags.Static | BindingFlags.NonPublic);
            var lightmapSettings = getLightmapSettingsMethod.Invoke(null, null) as UnityEngine.Object;
            return new SerializedObject(lightmapSettings);
        }
    }
}